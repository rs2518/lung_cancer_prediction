import osimport numpy as npimport pandas as pdROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))PKG = os.path.join(ROOT, "lcml")CLINICAL_INFO_COLS = ["Dataset", "Disease Status", "Gender", "Race",                      "Age", "Stage", "Histology", "Survival Month",                      "Survival", "Smoking", "TNM stage (T)", "TNM stage (N)",                      "TNM stage (M)", "Recurrence", "Others"]STATUS_MAP = {"NSCLC":"Tumour", "Normal":"Non-tumour"}HISTOLOGY_MAP = {"ADC":"ADC",                 "Healthy":"Healthy",                 "LCC":"LCC",                 "SCC":"SCC",                 "Adenosquamous carcinoma":"ASC",                 "Large cell Neuroendocrine carcinoma":"LCNEC",                 "NSCLC-favor adenocarcinoma":"NFA",                 "NSClarge cell carcinoma-mixed":"Mixed",                 "Other":"Other",                 np.nan:np.nan}# STAGE_MAP = {" 1A":"1A",#              " 1B":"1B",#              " 2A":"2A",#              " 2B":"2B",#              "1":"1",#              "1A":"1A",#              "1B":"1B",#              "2":"2",#              "2A":"2A",#              "2B":"2B",#              "3A":"3A",#              "3B":"3B",#              "4":"4",#              np.nan:np.nan}STAGE_MAP = {" 1A":1,             " 1B":1,             " 2A":2,             " 2B":2,             "1":1,             "1A":1,             "1B":1,             "2":2,             "2A":2,             "2B":2,             "3A":3,             "3B":3,             "4":4,             np.nan:np.nan}    # Alternative versionSMOKING_MAP = {"Current":"Current",               "Ever-smoker":"Former",               "Ex-smoker":"Former",               "Former":"Former",               "Never":"Never",               "Never-smoker":"Never",               np.nan:np.nan}# NOTE: Include np.nan to see age distribution among missing valuesTRAIN_TEST_SPLIT = .7# # Sample IDs from literature (for PlotRLE)# SAMPLE_IDS = [918, 287, 438, 1062, 60, 627, 486, 1046, 1073, 779,#               476, 670, 156, 201, 485, 111, 51, 158, 387, 357,#               117, 869, 637, 270, 749, 54, 403, 471, 386, 1117,#               849, 534, 612, 22, 580, 48, 58, 95, 140, 181,#               420, 973, 939, 283, 936, 221, 507, 651, 266, 1]def create_directory(path):    """Create directory for given path if it doesn't exist    """    if not os.path.exists(path):        os.mkdir(path)        print("Created '{}' directory!".format(path[path.rfind("/")+1:]))        def load_clinical_info():    """Load cleaned version of clinical information dataset    """    data = pd.read_csv("https://figshare.com/ndownloader/files/10449075",                       sep="\t", index_col=0, header=0,                       names=CLINICAL_INFO_COLS)        # Recode features    data["Disease Status"] = data["Disease Status"].map(STATUS_MAP)    # NSCLC/Normal --> Tumour/Non-tumour    data["Stage_opt"] = data["Stage"].apply(        lambda x: "1B" if x==" pT2N0" else STAGE_MAP[x])    # Optimistic recoding of "Stage" (pT2N0 --> 1B)    data["Stage_pes"] = data["Stage"].apply(        lambda x: "2A" if x==" pT2N0" else STAGE_MAP[x])    # Pessimistic recoding of "Stage" (pT2N0 --> 2A)    data["Smoking_opt"] = data["Smoking"].apply(        lambda x: "Never" if x=="Non-smoking" else SMOKING_MAP[x])    # Optimistic recoding of "Smoking" (non-smoking --> never)    data["Smoking_pes"] = data["Smoking"].apply(        lambda x: "Former" if x=="Non-smoking" else SMOKING_MAP[x])    # Pessimistic recoding of "Smoking" (non-smoking --> former)    data.loc[(data["Disease Status"]=="Non-tumour")        & (data["Histology"].isnull()), "Histology"] = "Healthy"                # Disease subtype for healthy patients should be "Healthy"    data["Histology"] = data["Histology"].map(HISTOLOGY_MAP)        data["Age"] = np.floor(data["Age"])    # Remove columns    rm = ["Race",          "Survival Month",          "Recurrence",          "Others",          "TNM stage (T)",          "TNM stage (N)",          "TNM stage (M)"]    data.drop(columns=rm, inplace=True)        # Convert "object columns to "categories""    cols = data.select_dtypes(include=["object"]).columns    for col in cols:        data[col] = data[col].astype("category")        return data